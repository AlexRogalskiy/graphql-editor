{"remainingRequest":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":false,\"typescript\":true,\"parseProps\":false}]],\"plugins\":[[\"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/docz-core/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/react-docgen-typescript-loader/dist/index.js?{}!/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/code-generators/utils.ts","dependencies":[{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/code-generators/utils.ts","mtime":1538287220000},{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/react-docgen-typescript-loader/dist/index.js","mtime":1537490019000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nimport { SubTypes, nodeTypes } from '../../nodeTypes'; // import * as FileSaver from \"file-saver\";\n\nexport var find = function find(nodes, type) {\n  return nodes.filter(function (n) {\n    return n.type === type && n.subType === SubTypes.definition;\n  });\n};\nexport var getPath = function getPath(node, links, nodes) {\n  var nextLink =\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(nodeId) {\n    var link;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return nodeId;\n\n          case 2:\n            link = links.find(function (l) {\n              return l.to.nodeId === nodeId && nodes.find(function (n) {\n                return n.id === l.from.nodeId;\n              }).subType !== SubTypes.definition;\n            });\n\n            if (!link) {\n              _context.next = 5;\n              break;\n            }\n\n            return _context.delegateYield(nextLink(link.from.nodeId), \"t0\", 5);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  });\n\n  var firstLink = nextLink(node.id);\n\n  var all = _toConsumableArray(firstLink);\n\n  all = all.filter(function (a) {\n    return a !== node.id;\n  });\n  return all;\n};\nexport var getPathNodes = function getPathNodes(node, links, nodes) {\n  var p = getPath(node, links, nodes).map(function (p) {\n    var n = nodes.find(function (n) {\n      return n.id === p;\n    });\n\n    if (n.clone) {\n      return [n].concat(_toConsumableArray(getPathNodes(nodes.find(function (nn) {\n        return nn.id === n.clone;\n      }), links, nodes)));\n    }\n\n    return [n];\n  }).reduce(function (a, b) {\n    return [].concat(_toConsumableArray(a), _toConsumableArray(b));\n  }, []);\n  return p;\n};\nexport var nodeOrRef = function nodeOrRef(node, nodes) {\n  if (!node.clone) {\n    return node;\n  }\n\n  return nodes.find(function (n) {\n    return n.id === node.clone;\n  });\n};\nexport var getArgumentNodes = function getArgumentNodes(node, links, nodes) {\n  return links.filter(function (l) {\n    return l.to.nodeId === node.id;\n  }).map(function (l) {\n    return l.from;\n  }).map(function (l) {\n    return nodes.find(function (n) {\n      return n.id === l.nodeId;\n    });\n  }).map(function (n) {\n    return n.type === nodeTypes.array ? getDefinitionPoints(links, nodes, n, 'to', true, n.required) : [n];\n  }).reduce(function (a, b) {\n    return [].concat(_toConsumableArray(a), _toConsumableArray(b));\n  }, []);\n};\nexport var getDefinitionPoints = function getDefinitionPoints(links, nodes, n, io) {\n  var array = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var arrayRequired = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  return links.filter(function (l) {\n    return l[io].nodeId === n.id;\n  }).map(function (l) {\n    return nodes.find(function (n) {\n      return n.id === l[io !== 'to' ? 'to' : 'from'].nodeId;\n    });\n  }).filter(function (n) {\n    return n;\n  }).map(function (l) {\n    //ZamieniÄ‡ na Transformed Inpute\n    var argumentNodes = getArgumentNodes(l, links, nodes);\n\n    if (l.type === nodeTypes.array) {\n      return getDefinitionPoints(links, nodes, l, io, true, l.required);\n    }\n\n    return [_objectSpread({}, l, {\n      array: array,\n      arrayRequired: arrayRequired,\n      args: argumentNodes\n    })];\n  }).reduce(function (a, b) {\n    return [].concat(_toConsumableArray(a), _toConsumableArray(b));\n  }, []).map(function (n) {\n    return _objectSpread({}, n, {\n      array: array || n.array\n    });\n  });\n};\nexport var getDefinitionInputs = function getDefinitionInputs(links, nodes, n) {\n  return getDefinitionPoints(links, nodes, n, 'to');\n};\nexport var getDefinitionOutputs = function getDefinitionOutputs(links, nodes, n) {\n  return getDefinitionPoints(links, nodes, n, 'from');\n};\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(find, \"find\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/code-generators/utils.ts\");\n  reactHotLoader.register(getPath, \"getPath\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/code-generators/utils.ts\");\n  reactHotLoader.register(getPathNodes, \"getPathNodes\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/code-generators/utils.ts\");\n  reactHotLoader.register(nodeOrRef, \"nodeOrRef\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/code-generators/utils.ts\");\n  reactHotLoader.register(getArgumentNodes, \"getArgumentNodes\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/code-generators/utils.ts\");\n  reactHotLoader.register(getDefinitionPoints, \"getDefinitionPoints\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/code-generators/utils.ts\");\n  reactHotLoader.register(getDefinitionInputs, \"getDefinitionInputs\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/code-generators/utils.ts\");\n  reactHotLoader.register(getDefinitionOutputs, \"getDefinitionOutputs\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/code-generators/utils.ts\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/code-generators/utils.ts"],"names":["SubTypes","nodeTypes","find","nodes","type","filter","n","subType","definition","getPath","node","links","nextLink","nodeId","link","l","to","id","from","firstLink","all","a","getPathNodes","p","map","clone","nn","reduce","b","nodeOrRef","getArgumentNodes","array","getDefinitionPoints","required","io","arrayRequired","argumentNodes","args","getDefinitionInputs","getDefinitionOutputs"],"mappings":"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","sourcesContent":["import { NodeType, LinkType } from '@slothking-online/diagram';\nimport { TransformedInput, GraphQLNodeType } from '.';\nimport { SubTypes, allTypes, nodeTypes } from '../../nodeTypes';\n// import * as FileSaver from \"file-saver\";\n\nexport const find = (nodes: Array<GraphQLNodeType>, type: allTypes): Array<GraphQLNodeType> => {\n  return nodes.filter((n) => n.type === type && n.subType === SubTypes.definition);\n};\nexport const getPath = (\n  node: GraphQLNodeType,\n  links: Array<LinkType>,\n  nodes: Array<GraphQLNodeType>\n): Array<string> => {\n  const nextLink = function*(nodeId: string) {\n    yield nodeId;\n    const link: LinkType = links.find(\n      (l: LinkType) =>\n        l.to.nodeId === nodeId &&\n        nodes.find((n) => n.id === l.from.nodeId).subType !== SubTypes.definition\n    );\n    if (link) {\n      yield* nextLink(link.from.nodeId);\n    }\n  };\n  const firstLink = nextLink(node.id);\n  let all = [...firstLink];\n  all = all.filter((a) => a !== node.id);\n  return all;\n};\nexport const getPathNodes = (\n  node: GraphQLNodeType,\n  links: Array<LinkType>,\n  nodes: Array<GraphQLNodeType>\n): Array<GraphQLNodeType> => {\n  let p = getPath(node, links, nodes)\n    .map((p) => {\n      const n = nodes.find((n) => n.id === p);\n      if (n.clone) {\n        return [n, ...getPathNodes(nodes.find((nn) => nn.id === n.clone), links, nodes)];\n      }\n      return [n];\n    })\n    .reduce((a, b) => [...a, ...b], []);\n  return p;\n};\nexport const nodeOrRef = (node: GraphQLNodeType, nodes: Array<NodeType>) => {\n  if (!node.clone) {\n    return node;\n  }\n  return nodes.find((n) => n.id === node.clone);\n};\nexport type definitionFunc = (\n  links: Array<LinkType>,\n  nodes: Array<GraphQLNodeType>,\n  n: GraphQLNodeType\n) => TransformedInput[];\n\nexport type definitionPoints = (\n  links: Array<LinkType>,\n  nodes: Array<GraphQLNodeType>,\n  n: GraphQLNodeType,\n  io: keyof Pick<LinkType, 'from' | 'to'>,\n  array?: boolean,\n  arrayRequired?: boolean\n) => TransformedInput[];\n\nexport const getArgumentNodes = (\n  node: GraphQLNodeType,\n  links: Array<LinkType>,\n  nodes: Array<GraphQLNodeType>\n): Array<GraphQLNodeType> =>\n  links\n    .filter((l) => l.to.nodeId === node.id)\n    .map((l) => l.from)\n    .map((l) => nodes.find((n) => n.id === l.nodeId))\n    .map(\n      (n) =>\n        n.type === nodeTypes.array\n          ? getDefinitionPoints(links, nodes, n, 'to', true, n.required)\n          : [n]\n    )\n    .reduce((a, b) => [...a, ...b], []);\n\nexport const getDefinitionPoints: definitionPoints = (\n  links,\n  nodes,\n  n,\n  io,\n  array = false,\n  arrayRequired = false\n) =>\n  links\n    .filter((l) => l[io].nodeId === n.id)\n    .map(\n      (l) => nodes.find((n) => n.id === l[io !== 'to' ? 'to' : 'from'].nodeId) as GraphQLNodeType\n    )\n    .filter((n) => n)\n    .map((l) => {\n      //ZamieniÄ‡ na Transformed Inpute\n      const argumentNodes: GraphQLNodeType[] = getArgumentNodes(l, links, nodes);\n      if (l.type === nodeTypes.array) {\n        return getDefinitionPoints(links, nodes, l, io, true, l.required);\n      }\n      return [{ ...l, array, arrayRequired, args: argumentNodes } as TransformedInput];\n    })\n    .reduce((a, b) => [...a, ...b], [])\n    .map((n) => ({\n      ...n,\n      array: array || n.array\n    }));\nexport const getDefinitionInputs: definitionFunc = (links, nodes, n) =>\n  getDefinitionPoints(links, nodes, n, 'to');\nexport const getDefinitionOutputs: definitionFunc = (links, nodes, n) =>\n  getDefinitionPoints(links, nodes, n, 'from');\n"]}]}