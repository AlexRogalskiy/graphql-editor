{"remainingRequest":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":false,\"typescript\":true,\"parseProps\":false}]],\"plugins\":[[\"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/docz-core/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/react-docgen-typescript-loader/dist/index.js?{}!/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/load/makeNodes.ts","dependencies":[{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/load/makeNodes.ts","mtime":1545905180000},{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/react-docgen-typescript-loader/dist/index.js","mtime":1537490019000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { getTypes } from '.';\nimport { nodeTypes, SubTypes } from '../../nodeTypes';\nimport { noPort, accepted } from '../../categories';\nimport { MAIN_TAB_NAME, generateId } from '@slothking-online/diagram';\n\nvar isNotCircularReferenceType = function isNotCircularReferenceType(disallowedTypes) {\n  return function (fieldType) {\n    return !disallowedTypes.includes(fieldType);\n  };\n};\n\nvar makeCustomNode = function makeCustomNode(node) {\n  return _objectSpread({\n    id: generateId(),\n    outputs: noPort,\n    inputs: [{\n      name: '',\n      accepted: accepted,\n      id: generateId()\n    }],\n    tab: MAIN_TAB_NAME,\n    editable: true,\n    nodes: [],\n    x: window.innerWidth * Math.random(),\n    y: window.innerHeight * Math.random()\n  }, node);\n};\n\nexport var makeNodes = function makeNodes(schema) {\n  var types = getTypes(schema);\n  var allowType = isNotCircularReferenceType([].concat(_toConsumableArray(types.query ? [types.query[0].name] : []), _toConsumableArray(types.mutation ? [types.mutation[0].name] : []), _toConsumableArray(types.subscription ? [types.subscription[0].name] : [])));\n\n  var makeCustomDefinitionNode = function makeCustomDefinitionNode(t) {\n    return makeCustomNode({\n      name: t.name,\n      type: t.type,\n      subType: t.subType\n    });\n  };\n\n  var makeCustomScalarDefinitionNode = function makeCustomScalarDefinitionNode(t) {\n    return _objectSpread({}, makeCustomDefinitionNode(t), {\n      inputs: []\n    });\n  };\n\n  var makeCustomOperationNode = function makeCustomOperationNode(name, operationType) {\n    return makeCustomNode({\n      name: name,\n      type: operationType,\n      subType: SubTypes.definition,\n      outputs: [{\n        name: ''\n      }]\n    });\n  };\n\n  var makeCustomArrayNode = function makeCustomArrayNode(props) {\n    return makeCustomNode({\n      id: props.arrayFieldNodeId,\n      name: 'array',\n      type: nodeTypes.array,\n      subType: SubTypes.field,\n      required: props.arrayRequired,\n      editable: false,\n      inputs: [{\n        name: '',\n        id: props.arrayInputId\n      }],\n      outputs: [{\n        name: '',\n        id: props.arrayOutputId\n      }],\n      x: props.x,\n      y: props.y\n    });\n  };\n\n  var makeCustomFieldNode = function makeCustomFieldNode(f, props) {\n    return makeCustomNode({\n      id: props.fieldNodeId,\n      name: f.name,\n      type: f.type,\n      subType: f.subType,\n      required: f.required,\n      kind: f.kind,\n      clone: props.clone,\n      inputs: [{\n        id: props.fieldInputId,\n        accepted: accepted,\n        name: ''\n      }],\n      outputs: [{\n        name: '',\n        id: props.outputId\n      }],\n      x: props.x,\n      y: props.y\n    });\n  };\n\n  var nodes = [types.interface, types.type, types.input, types.enum, types.union].map(function (t) {\n    return t.map(makeCustomDefinitionNode);\n  }).reduce(function (a, b) {\n    return [].concat(_toConsumableArray(a), _toConsumableArray(b));\n  }, []);\n  nodes = [].concat(_toConsumableArray(types.scalar.map(makeCustomScalarDefinitionNode)), _toConsumableArray(nodes), _toConsumableArray(types.query ? types.query[0].fields.filter(function (f) {\n    return allowType(f.name);\n  }).map(function (f) {\n    return makeCustomOperationNode(f.name, nodeTypes.Query);\n  }) : []), _toConsumableArray(types.mutation ? types.mutation[0].fields.filter(function (f) {\n    return allowType(f.name);\n  }).map(function (f) {\n    return makeCustomOperationNode(f.name, nodeTypes.Mutation);\n  }) : []), _toConsumableArray(types.subscription ? types.subscription[0].fields.filter(function (f) {\n    return allowType(f.name);\n  }).map(function (f) {\n    return makeCustomOperationNode(f.name, nodeTypes.Subscription);\n  }) : []));\n  var links = [];\n  var flowHeight = window.innerHeight || 1000;\n  var nowY = 0;\n  var nowX = 0;\n  var nodeHeight = 100;\n  var nodeWidth = 180;\n\n  var fieldNodesCreation = function fieldNodesCreation(f, type) {\n    return f.filter(function (f) {\n      return allowType(f.name);\n    }).map(function (t, i) {\n      if (nowY > flowHeight) {\n        nowY = 0, nowX += nodeWidth * 3;\n      }\n\n      var originalNode = nodes.find(function (n) {\n        return n.name === t.name && n.type === type;\n      });\n      originalNode.x = nowX;\n      originalNode.y = nowY + t.fields.length * nodeHeight / 2.0;\n      return t.fields.map(function (f) {\n        var outputId = generateId();\n        var fieldNodeId = generateId();\n        var fieldInputId = generateId();\n        var returnNodes = [];\n\n        if (f.array) {\n          var _arrayFieldNodeId = generateId();\n\n          var _arrayInputId = generateId();\n\n          var _arrayOutputId = generateId();\n\n          var customArrayNode = makeCustomArrayNode({\n            arrayFieldNodeId: _arrayFieldNodeId,\n            arrayInputId: _arrayInputId,\n            arrayOutputId: _arrayOutputId,\n            arrayRequired: f.arrayRequired,\n            x: nowX - nodeWidth,\n            y: nowY\n          });\n          links.push({\n            from: {\n              nodeId: _arrayFieldNodeId,\n              portId: _arrayOutputId\n            },\n            to: {\n              nodeId: originalNode.id,\n              portId: originalNode.inputs[0].id\n            }\n          });\n          links.push({\n            from: {\n              nodeId: fieldNodeId,\n              portId: outputId\n            },\n            to: {\n              nodeId: _arrayFieldNodeId,\n              portId: _arrayInputId\n            }\n          });\n          returnNodes.push(customArrayNode);\n        } else {\n          links.push({\n            from: {\n              nodeId: fieldNodeId,\n              portId: outputId\n            },\n            to: {\n              nodeId: originalNode.id,\n              portId: originalNode.inputs[0].id\n            }\n          });\n        }\n\n        var argY = nowY - nodeHeight / 2.0;\n\n        if (f.args && f.args.length > 0) {\n          f.args.map(function (arg) {\n            var argOutputId = generateId();\n            var argFieldNodeId = generateId();\n            var argFieldInputId = generateId();\n\n            if (arg.array) {\n              var argArrayFieldNodeId = generateId();\n              var argArrayInputId = generateId();\n              var argArrayOutputId = generateId();\n\n              var _customArrayNode = makeCustomArrayNode({\n                arrayFieldNodeId: argArrayFieldNodeId,\n                arrayInputId: argArrayInputId,\n                arrayOutputId: argArrayOutputId,\n                arrayRequired: f.arrayRequired,\n                x: nowX - nodeWidth,\n                y: nowY\n              });\n\n              links.push({\n                from: {\n                  nodeId: argArrayFieldNodeId,\n                  portId: argArrayOutputId\n                },\n                to: {\n                  nodeId: fieldNodeId,\n                  portId: fieldInputId\n                }\n              });\n              links.push({\n                from: {\n                  nodeId: argFieldNodeId,\n                  portId: argOutputId\n                },\n                to: {\n                  nodeId: argArrayFieldNodeId,\n                  portId: argArrayInputId\n                }\n              });\n              returnNodes.push(_customArrayNode);\n            } else {\n              links.push({\n                from: {\n                  nodeId: argFieldNodeId,\n                  portId: argOutputId\n                },\n                to: {\n                  nodeId: fieldNodeId,\n                  portId: fieldInputId\n                }\n              });\n            }\n\n            var customFieldNode = makeCustomFieldNode(arg, {\n              fieldNodeId: argFieldNodeId,\n              clone: arg.kind && nodes.find(function (n) {\n                return n.name === arg.kind;\n              }).id,\n              x: f.array ? arg.array ? nowX - nodeWidth * 4 : nowX - nodeWidth * 3 : arg.array ? nowX - nodeWidth * 3 : nowX - nodeWidth * 2,\n              y: argY,\n              fieldInputId: argFieldInputId,\n              outputId: argOutputId\n            });\n            returnNodes.push(customFieldNode);\n            argY += nodeHeight;\n          });\n        }\n\n        var customFieldNode = makeCustomFieldNode(f, {\n          fieldNodeId: fieldNodeId,\n          clone: f.kind && nodes.find(function (n) {\n            return n.name === f.kind;\n          }).id,\n          x: f.array ? nowX - nodeWidth * 2 : nowX - nodeWidth,\n          y: nowY,\n          fieldInputId: fieldInputId,\n          outputId: outputId\n        });\n        returnNodes.push(customFieldNode);\n        nowY += nodeHeight;\n        return returnNodes;\n      }).reduce(function (a, b) {\n        return [].concat(_toConsumableArray(a), _toConsumableArray(b));\n      }, []);\n    }).reduce(function (a, b) {\n      return [].concat(_toConsumableArray(a), _toConsumableArray(b));\n    }, []);\n  };\n\n  var operationNodesCreation = function operationNodesCreation(f, type) {\n    return f.fields.filter(function (f) {\n      return allowType(f.kind || 'allowed');\n    }).map(function (f) {\n      if (nowY > flowHeight) {\n        nowY = 0, nowX += nodeWidth * 3;\n      }\n\n      var originalNode = nodes.find(function (n) {\n        return n.name === f.name && n.type === type;\n      });\n      originalNode.x = nowX;\n      originalNode.y = nowY + f.args.length * nodeHeight / 2.0;\n      var outputId = generateId();\n      var fieldNodeId = generateId();\n      var fieldInputId = generateId();\n      var returnNodes = [];\n\n      if (f.array) {\n        var _arrayFieldNodeId2 = generateId();\n\n        var _arrayInputId2 = generateId();\n\n        var _arrayOutputId2 = generateId();\n\n        var customArrayNode = makeCustomArrayNode({\n          arrayFieldNodeId: _arrayFieldNodeId2,\n          arrayInputId: _arrayInputId2,\n          arrayOutputId: _arrayOutputId2,\n          arrayRequired: f.arrayRequired,\n          x: nowX + nodeWidth,\n          y: nowY\n        });\n        links.push({\n          from: {\n            nodeId: originalNode.id,\n            portId: originalNode.outputs[0].id\n          },\n          to: {\n            nodeId: _arrayFieldNodeId2,\n            portId: _arrayInputId2\n          }\n        });\n        links.push({\n          from: {\n            nodeId: _arrayFieldNodeId2,\n            portId: _arrayOutputId2\n          },\n          to: {\n            nodeId: fieldNodeId,\n            portId: fieldInputId\n          }\n        });\n        returnNodes.push(customArrayNode);\n      } else {\n        links.push({\n          from: {\n            nodeId: originalNode.id,\n            portId: originalNode.outputs[0].id\n          },\n          to: {\n            nodeId: fieldNodeId,\n            portId: fieldInputId\n          }\n        });\n      }\n\n      if (f.args && f.args.length > 0) {\n        f.args.map(function (arg) {\n          var argOutputId = generateId();\n          var argFieldNodeId = generateId();\n          var argFieldInputId = generateId();\n\n          if (arg.array) {\n            var argArrayFieldNodeId = generateId();\n            var argArrayInputId = generateId();\n            var argArrayOutputId = generateId();\n\n            var _customArrayNode2 = makeCustomArrayNode({\n              arrayFieldNodeId: argArrayFieldNodeId,\n              arrayInputId: argArrayInputId,\n              arrayOutputId: argArrayOutputId,\n              arrayRequired: f.arrayRequired,\n              x: nowX - nodeWidth,\n              y: nowY\n            });\n\n            links.push({\n              from: {\n                nodeId: argArrayFieldNodeId,\n                portId: argArrayOutputId\n              },\n              to: {\n                nodeId: originalNode.id,\n                portId: originalNode.inputs[0].id\n              }\n            });\n            links.push({\n              from: {\n                nodeId: argFieldNodeId,\n                portId: argOutputId\n              },\n              to: {\n                nodeId: argArrayFieldNodeId,\n                portId: argArrayInputId\n              }\n            });\n            returnNodes.push(_customArrayNode2);\n          } else {\n            links.push({\n              from: {\n                nodeId: argFieldNodeId,\n                portId: argOutputId\n              },\n              to: {\n                nodeId: originalNode.id,\n                portId: originalNode.inputs[0].id\n              }\n            });\n          }\n\n          var customFieldNode = makeCustomFieldNode(arg, {\n            fieldNodeId: argFieldNodeId,\n            clone: arg.kind && nodes.find(function (n) {\n              return n.name === arg.kind;\n            }).id,\n            x: arg.array ? nowX - nodeWidth * 2 : nowX - nodeWidth,\n            y: nowY,\n            fieldInputId: argFieldInputId,\n            outputId: argOutputId\n          });\n          returnNodes.push(customFieldNode);\n          nowY += nodeHeight;\n        });\n      }\n\n      var customFieldNode = makeCustomFieldNode(f, {\n        fieldNodeId: fieldNodeId,\n        clone: f.kind && nodes.find(function (n) {\n          return n.name === f.kind;\n        }).id,\n        x: f.array ? nowX + nodeWidth * 2 : nowX + nodeWidth,\n        y: nowY,\n        fieldInputId: fieldInputId,\n        outputId: outputId\n      });\n      returnNodes.push(customFieldNode);\n      nowY += nodeHeight;\n      return returnNodes;\n    }).reduce(function (a, b) {\n      return [].concat(_toConsumableArray(a), _toConsumableArray(b));\n    }, []);\n  };\n\n  operationNodesCreation;\n  nodes = [].concat(_toConsumableArray(nodes), _toConsumableArray(fieldNodesCreation(types.enum, nodeTypes.enum)), _toConsumableArray(fieldNodesCreation(types.union, nodeTypes.union)), _toConsumableArray(fieldNodesCreation(types.type, nodeTypes.type)), _toConsumableArray(fieldNodesCreation(types.interface, nodeTypes.interface)), _toConsumableArray(fieldNodesCreation(types.input, nodeTypes.input)), _toConsumableArray(types.query ? operationNodesCreation(types.query[0], nodeTypes.Query) : []), _toConsumableArray(types.mutation ? operationNodesCreation(types.mutation[0], nodeTypes.Mutation) : []), _toConsumableArray(types.subscription ? operationNodesCreation(types.subscription[0], nodeTypes.Subscription) : []));\n  return {\n    nodes: nodes,\n    links: links\n  };\n};\n\ntry {\n  // @ts-ignore\n  makeNodes.displayName = \"makeNodes\"; // @ts-ignore\n\n  makeNodes.__docgenInfo = {\n    \"description\": \"\",\n    \"displayName\": \"makeNodes\",\n    \"props\": {\n      \"astNode\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"astNode\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"SchemaDefinitionNode\"\n        }\n      },\n      \"extensionASTNodes\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"extensionASTNodes\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"ReadonlyArray<SchemaExtensionNode>\"\n        }\n      },\n      \"getQueryType\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"getQueryType\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"() => GraphQLObjectType\"\n        }\n      },\n      \"getMutationType\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"getMutationType\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"() => GraphQLObjectType\"\n        }\n      },\n      \"getSubscriptionType\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"getSubscriptionType\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"() => GraphQLObjectType\"\n        }\n      },\n      \"getTypeMap\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"getTypeMap\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"() => TypeMap\"\n        }\n      },\n      \"getType\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"getType\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"(name: string) => GraphQLNamedType\"\n        }\n      },\n      \"getPossibleTypes\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"getPossibleTypes\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"(abstractType: GraphQLAbstractType) => ReadonlyArray<GraphQLObjectType>\"\n        }\n      },\n      \"isPossibleType\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"isPossibleType\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"(abstractType: GraphQLAbstractType, possibleType: GraphQLObjectType) => boolean\"\n        }\n      },\n      \"getDirectives\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"getDirectives\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"() => ReadonlyArray<GraphQLDirective>\"\n        }\n      },\n      \"getDirective\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"getDirective\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"(name: string) => GraphQLDirective\"\n        }\n      }\n    }\n  }; // @ts-ignore\n\n  if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") // @ts-ignore\n    STORYBOOK_REACT_CLASSES[\"src/editor/livegen/load/makeNodes.ts#makeNodes\"] = {\n      docgenInfo: makeNodes.__docgenInfo,\n      name: \"makeNodes\",\n      path: \"src/editor/livegen/load/makeNodes.ts#makeNodes\"\n    };\n} catch (__react_docgen_typescript_loader_error) {}\n\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(isNotCircularReferenceType, \"isNotCircularReferenceType\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/load/makeNodes.ts\");\n  reactHotLoader.register(makeCustomNode, \"makeCustomNode\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/load/makeNodes.ts\");\n  reactHotLoader.register(makeNodes, \"makeNodes\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/load/makeNodes.ts\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/load/makeNodes.ts"],"names":["getTypes","nodeTypes","SubTypes","noPort","accepted","MAIN_TAB_NAME","generateId","isNotCircularReferenceType","disallowedTypes","fieldType","includes","makeCustomNode","node","id","outputs","inputs","name","tab","editable","nodes","x","window","innerWidth","Math","random","y","innerHeight","makeNodes","schema","types","allowType","query","mutation","subscription","makeCustomDefinitionNode","t","type","subType","makeCustomScalarDefinitionNode","makeCustomOperationNode","operationType","definition","makeCustomArrayNode","props","arrayFieldNodeId","array","field","required","arrayRequired","arrayInputId","arrayOutputId","makeCustomFieldNode","f","fieldNodeId","kind","clone","fieldInputId","outputId","interface","input","enum","union","map","reduce","a","b","scalar","fields","filter","Query","Mutation","Subscription","links","flowHeight","nowY","nowX","nodeHeight","nodeWidth","fieldNodesCreation","i","originalNode","find","n","length","returnNodes","customArrayNode","push","from","nodeId","portId","to","argY","args","arg","argOutputId","argFieldNodeId","argFieldInputId","argArrayFieldNodeId","argArrayInputId","argArrayOutputId","customFieldNode","operationNodesCreation","displayName","__docgenInfo","STORYBOOK_REACT_CLASSES","docgenInfo","path","__react_docgen_typescript_loader_error"],"mappings":"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","sourcesContent":["import { getTypes } from '.';\nimport { GraphQLNodeType } from '../code-generators';\nimport { nodeTypes, SubTypes, allTypes } from '../../nodeTypes';\nimport { noPort, accepted } from '../../categories';\nimport { MAIN_TAB_NAME, generateId, LinkType } from '@slothking-online/diagram';\nimport {\n  EditorSchemaBasicType,\n  EditorSchemaType,\n  EditorSchemaImport,\n  EditorSchemaField\n} from './import';\nimport { GraphQLSchema } from 'graphql';\n\nconst isNotCircularReferenceType = (disallowedTypes: string[]) => (fieldType: string) => {\n  return !disallowedTypes.includes(fieldType);\n};\n\nconst makeCustomNode = (\n  node: Partial<GraphQLNodeType> & Pick<GraphQLNodeType, 'subType' | 'type' | 'name'>\n): GraphQLNodeType => ({\n  id: generateId(),\n  outputs: noPort,\n  inputs: [\n    {\n      name: '',\n      accepted,\n      id: generateId()\n    }\n  ],\n  tab: MAIN_TAB_NAME,\n  editable: true,\n  nodes: [],\n  x: window.innerWidth * Math.random(),\n  y: window.innerHeight * Math.random(),\n  ...node\n});\n\nexport const makeNodes = (\n  schema: GraphQLSchema\n): {\n  nodes: GraphQLNodeType[];\n  links: LinkType[];\n} => {\n  const types: EditorSchemaImport = getTypes(schema);\n  const allowType = isNotCircularReferenceType([\n    ...(types.query ? [types.query[0].name] : []),\n    ...(types.mutation ? [types.mutation[0].name] : []),\n    ...(types.subscription ? [types.subscription[0].name] : [])\n  ]);\n  const makeCustomDefinitionNode = (t: EditorSchemaType) =>\n    makeCustomNode({\n      name: t.name,\n      type: t.type,\n      subType: t.subType\n    });\n  const makeCustomScalarDefinitionNode = (t: EditorSchemaType): GraphQLNodeType => ({\n    ...makeCustomDefinitionNode(t),\n    inputs: []\n  });\n  const makeCustomOperationNode = (\n    name: string,\n    operationType: nodeTypes.Query | nodeTypes.Mutation | nodeTypes.Subscription\n  ) =>\n    makeCustomNode({\n      name,\n      type: operationType,\n      subType: SubTypes.definition,\n      outputs: [{ name: '' }]\n    });\n  const makeCustomArrayNode = (props: {\n    arrayFieldNodeId: string;\n    arrayInputId: string;\n    arrayOutputId: string;\n    x: number;\n    y: number;\n    arrayRequired: boolean;\n  }) =>\n    makeCustomNode({\n      id: props.arrayFieldNodeId,\n      name: 'array',\n      type: nodeTypes.array,\n      subType: SubTypes.field,\n      required: props.arrayRequired,\n      editable: false,\n      inputs: [{ name: '', id: props.arrayInputId }],\n      outputs: [{ name: '', id: props.arrayOutputId }],\n      x: props.x,\n      y: props.y\n    });\n\n  const makeCustomFieldNode = (\n    f: EditorSchemaField,\n    props: {\n      x: number;\n      y: number;\n      clone?: string;\n      fieldNodeId: string;\n      outputId: string;\n      fieldInputId: string;\n    }\n  ) =>\n    makeCustomNode({\n      id: props.fieldNodeId,\n      name: f.name,\n      type: f.type,\n      subType: f.subType,\n      required: f.required,\n      kind: f.kind,\n      clone: props.clone,\n      inputs: [\n        {\n          id: props.fieldInputId,\n          accepted,\n          name: ''\n        }\n      ],\n      outputs: [{ name: '', id: props.outputId }],\n      x: props.x,\n      y: props.y\n    });\n  let nodes: GraphQLNodeType[] = [types.interface, types.type, types.input, types.enum, types.union]\n    .map((t) => t.map(makeCustomDefinitionNode))\n    .reduce((a, b) => [...a, ...b], []);\n  nodes = [\n    ...types.scalar.map(makeCustomScalarDefinitionNode),\n    ...nodes,\n    ...(types.query\n      ? types.query[0].fields\n          .filter((f) => allowType(f.name))\n          .map((f) => makeCustomOperationNode(f.name, nodeTypes.Query))\n      : []),\n    ...(types.mutation\n      ? types.mutation[0].fields\n          .filter((f) => allowType(f.name))\n          .map((f) => makeCustomOperationNode(f.name, nodeTypes.Mutation))\n      : []),\n    ...(types.subscription\n      ? types.subscription[0].fields\n          .filter((f) => allowType(f.name))\n          .map((f) => makeCustomOperationNode(f.name, nodeTypes.Subscription))\n      : [])\n  ];\n\n  const links: LinkType[] = [];\n  const flowHeight = window.innerHeight || 1000;\n  let nowY = 0;\n  let nowX = 0;\n  const nodeHeight = 100;\n  const nodeWidth = 180;\n  const fieldNodesCreation = (f: EditorSchemaBasicType[], type: allTypes): GraphQLNodeType[] =>\n    f\n      .filter((f) => allowType(f.name))\n      .map((t, i) => {\n        if (nowY > flowHeight) {\n          (nowY = 0), (nowX += nodeWidth * 3);\n        }\n        const originalNode = nodes.find((n) => n.name === t.name && n.type === type);\n        originalNode.x = nowX;\n        originalNode.y = nowY + (t.fields.length * nodeHeight) / 2.0;\n        return t.fields\n          .map((f) => {\n            const outputId = generateId();\n            const fieldNodeId = generateId();\n            const fieldInputId = generateId();\n            const returnNodes = [];\n            if (f.array) {\n              const arrayFieldNodeId = generateId();\n              const arrayInputId = generateId();\n              const arrayOutputId = generateId();\n              const customArrayNode = makeCustomArrayNode({\n                arrayFieldNodeId,\n                arrayInputId,\n                arrayOutputId,\n                arrayRequired: f.arrayRequired,\n                x: nowX - nodeWidth,\n                y: nowY\n              });\n              links.push({\n                from: {\n                  nodeId: arrayFieldNodeId,\n                  portId: arrayOutputId\n                },\n                to: {\n                  nodeId: originalNode.id,\n                  portId: originalNode.inputs[0].id\n                }\n              });\n              links.push({\n                from: {\n                  nodeId: fieldNodeId,\n                  portId: outputId\n                },\n                to: {\n                  nodeId: arrayFieldNodeId,\n                  portId: arrayInputId\n                }\n              });\n              returnNodes.push(customArrayNode);\n            } else {\n              links.push({\n                from: {\n                  nodeId: fieldNodeId,\n                  portId: outputId\n                },\n                to: {\n                  nodeId: originalNode.id,\n                  portId: originalNode.inputs[0].id\n                }\n              });\n            }\n            let argY = nowY - nodeHeight / 2.0;\n            if (f.args && f.args.length > 0) {\n              f.args.map((arg) => {\n                const argOutputId = generateId();\n                const argFieldNodeId = generateId();\n                const argFieldInputId = generateId();\n                if (arg.array) {\n                  const argArrayFieldNodeId = generateId();\n                  const argArrayInputId = generateId();\n                  const argArrayOutputId = generateId();\n                  const customArrayNode = makeCustomArrayNode({\n                    arrayFieldNodeId: argArrayFieldNodeId,\n                    arrayInputId: argArrayInputId,\n                    arrayOutputId: argArrayOutputId,\n                    arrayRequired: f.arrayRequired,\n                    x: nowX - nodeWidth,\n                    y: nowY\n                  });\n\n                  links.push({\n                    from: {\n                      nodeId: argArrayFieldNodeId,\n                      portId: argArrayOutputId\n                    },\n                    to: {\n                      nodeId: fieldNodeId,\n                      portId: fieldInputId\n                    }\n                  });\n                  links.push({\n                    from: {\n                      nodeId: argFieldNodeId,\n                      portId: argOutputId\n                    },\n                    to: {\n                      nodeId: argArrayFieldNodeId,\n                      portId: argArrayInputId\n                    }\n                  });\n                  returnNodes.push(customArrayNode);\n                } else {\n                  links.push({\n                    from: {\n                      nodeId: argFieldNodeId,\n                      portId: argOutputId\n                    },\n                    to: {\n                      nodeId: fieldNodeId,\n                      portId: fieldInputId\n                    }\n                  });\n                }\n                const customFieldNode = makeCustomFieldNode(arg, {\n                  fieldNodeId: argFieldNodeId,\n                  clone: arg.kind && nodes.find((n) => n.name === arg.kind).id,\n                  x: f.array\n                    ? arg.array\n                      ? nowX - nodeWidth * 4\n                      : nowX - nodeWidth * 3\n                    : arg.array\n                      ? nowX - nodeWidth * 3\n                      : nowX - nodeWidth * 2,\n                  y: argY,\n                  fieldInputId: argFieldInputId,\n                  outputId: argOutputId\n                });\n                returnNodes.push(customFieldNode);\n                argY += nodeHeight;\n              });\n            }\n            const customFieldNode = makeCustomFieldNode(f, {\n              fieldNodeId,\n              clone: f.kind && nodes.find((n) => n.name === f.kind).id,\n              x: f.array ? nowX - nodeWidth * 2 : nowX - nodeWidth,\n              y: nowY,\n              fieldInputId,\n              outputId\n            });\n            returnNodes.push(customFieldNode);\n            nowY += nodeHeight;\n            return returnNodes;\n          })\n          .reduce((a, b) => [...a, ...b], []);\n      })\n      .reduce((a, b) => [...a, ...b], []);\n  const operationNodesCreation = (f: EditorSchemaBasicType, type: allTypes): GraphQLNodeType[] => {\n    return f.fields\n      .filter((f) => allowType(f.kind || 'allowed'))\n      .map((f) => {\n        if (nowY > flowHeight) {\n          (nowY = 0), (nowX += nodeWidth * 3);\n        }\n        const originalNode = nodes.find((n) => n.name === f.name && n.type === type);\n        originalNode.x = nowX;\n        originalNode.y = nowY + (f.args.length * nodeHeight) / 2.0;\n        const outputId = generateId();\n        const fieldNodeId = generateId();\n        const fieldInputId = generateId();\n        const returnNodes = [];\n        if (f.array) {\n          const arrayFieldNodeId = generateId();\n          const arrayInputId = generateId();\n          const arrayOutputId = generateId();\n          const customArrayNode = makeCustomArrayNode({\n            arrayFieldNodeId,\n            arrayInputId,\n            arrayOutputId,\n            arrayRequired: f.arrayRequired,\n            x: nowX + nodeWidth,\n            y: nowY\n          });\n          links.push({\n            from: {\n              nodeId: originalNode.id,\n              portId: originalNode.outputs[0].id\n            },\n            to: {\n              nodeId: arrayFieldNodeId,\n              portId: arrayInputId\n            }\n          });\n          links.push({\n            from: {\n              nodeId: arrayFieldNodeId,\n              portId: arrayOutputId\n            },\n            to: {\n              nodeId: fieldNodeId,\n              portId: fieldInputId\n            }\n          });\n          returnNodes.push(customArrayNode);\n        } else {\n          links.push({\n            from: {\n              nodeId: originalNode.id,\n              portId: originalNode.outputs[0].id\n            },\n            to: {\n              nodeId: fieldNodeId,\n              portId: fieldInputId\n            }\n          });\n        }\n        if (f.args && f.args.length > 0) {\n          f.args.map((arg) => {\n            const argOutputId = generateId();\n            const argFieldNodeId = generateId();\n            const argFieldInputId = generateId();\n            if (arg.array) {\n              const argArrayFieldNodeId = generateId();\n              const argArrayInputId = generateId();\n              const argArrayOutputId = generateId();\n              const customArrayNode = makeCustomArrayNode({\n                arrayFieldNodeId: argArrayFieldNodeId,\n                arrayInputId: argArrayInputId,\n                arrayOutputId: argArrayOutputId,\n                arrayRequired: f.arrayRequired,\n                x: nowX - nodeWidth,\n                y: nowY\n              });\n\n              links.push({\n                from: {\n                  nodeId: argArrayFieldNodeId,\n                  portId: argArrayOutputId\n                },\n                to: {\n                  nodeId: originalNode.id,\n                  portId: originalNode.inputs[0].id\n                }\n              });\n              links.push({\n                from: {\n                  nodeId: argFieldNodeId,\n                  portId: argOutputId\n                },\n                to: {\n                  nodeId: argArrayFieldNodeId,\n                  portId: argArrayInputId\n                }\n              });\n              returnNodes.push(customArrayNode);\n            } else {\n              links.push({\n                from: {\n                  nodeId: argFieldNodeId,\n                  portId: argOutputId\n                },\n                to: {\n                  nodeId: originalNode.id,\n                  portId: originalNode.inputs[0].id\n                }\n              });\n            }\n            const customFieldNode = makeCustomFieldNode(arg, {\n              fieldNodeId: argFieldNodeId,\n              clone: arg.kind && nodes.find((n) => n.name === arg.kind).id,\n              x: arg.array ? nowX - nodeWidth * 2 : nowX - nodeWidth,\n              y: nowY,\n              fieldInputId: argFieldInputId,\n              outputId: argOutputId\n            });\n            returnNodes.push(customFieldNode);\n            nowY += nodeHeight;\n          });\n        }\n        const customFieldNode = makeCustomFieldNode(f, {\n          fieldNodeId,\n          clone: f.kind && nodes.find((n) => n.name === f.kind).id,\n          x: f.array ? nowX + nodeWidth * 2 : nowX + nodeWidth,\n          y: nowY,\n          fieldInputId,\n          outputId\n        });\n        returnNodes.push(customFieldNode);\n        nowY += nodeHeight;\n        return returnNodes;\n      })\n      .reduce((a, b) => [...a, ...b], []);\n  };\n  operationNodesCreation;\n  nodes = [\n    ...nodes,\n    ...fieldNodesCreation(types.enum, nodeTypes.enum),\n    ...fieldNodesCreation(types.union, nodeTypes.union),\n    ...fieldNodesCreation(types.type, nodeTypes.type),\n    ...fieldNodesCreation(types.interface, nodeTypes.interface),\n    ...fieldNodesCreation(types.input, nodeTypes.input),\n    ...(types.query ? operationNodesCreation(types.query[0], nodeTypes.Query) : []),\n    ...(types.mutation ? operationNodesCreation(types.mutation[0], nodeTypes.Mutation) : []),\n    ...(types.subscription\n      ? operationNodesCreation(types.subscription[0], nodeTypes.Subscription)\n      : [])\n  ];\n  return {\n    nodes,\n    links\n  };\n};\ntry {\n    // @ts-ignore\n    makeNodes.displayName = \"makeNodes\";\n    // @ts-ignore\n    makeNodes.__docgenInfo = { \"description\": \"\", \"displayName\": \"makeNodes\", \"props\": { \"astNode\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"astNode\", \"required\": true, \"type\": { \"name\": \"SchemaDefinitionNode\" } }, \"extensionASTNodes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"extensionASTNodes\", \"required\": true, \"type\": { \"name\": \"ReadonlyArray<SchemaExtensionNode>\" } }, \"getQueryType\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"getQueryType\", \"required\": true, \"type\": { \"name\": \"() => GraphQLObjectType\" } }, \"getMutationType\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"getMutationType\", \"required\": true, \"type\": { \"name\": \"() => GraphQLObjectType\" } }, \"getSubscriptionType\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"getSubscriptionType\", \"required\": true, \"type\": { \"name\": \"() => GraphQLObjectType\" } }, \"getTypeMap\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"getTypeMap\", \"required\": true, \"type\": { \"name\": \"() => TypeMap\" } }, \"getType\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"getType\", \"required\": true, \"type\": { \"name\": \"(name: string) => GraphQLNamedType\" } }, \"getPossibleTypes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"getPossibleTypes\", \"required\": true, \"type\": { \"name\": \"(abstractType: GraphQLAbstractType) => ReadonlyArray<GraphQLObjectType>\" } }, \"isPossibleType\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"isPossibleType\", \"required\": true, \"type\": { \"name\": \"(abstractType: GraphQLAbstractType, possibleType: GraphQLObjectType) => boolean\" } }, \"getDirectives\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"getDirectives\", \"required\": true, \"type\": { \"name\": \"() => ReadonlyArray<GraphQLDirective>\" } }, \"getDirective\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"getDirective\", \"required\": true, \"type\": { \"name\": \"(name: string) => GraphQLDirective\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/editor/livegen/load/makeNodes.ts#makeNodes\"] = { docgenInfo: makeNodes.__docgenInfo, name: \"makeNodes\", path: \"src/editor/livegen/load/makeNodes.ts#makeNodes\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"]}]}