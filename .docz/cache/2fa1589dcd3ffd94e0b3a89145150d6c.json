{"remainingRequest":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":false,\"typescript\":true,\"parseProps\":false}]],\"plugins\":[[\"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/docz-core/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/react-docgen-typescript-loader/dist/index.js?{}!/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/categories/index.ts","dependencies":[{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/categories/index.ts","mtime":1545853951000},{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/react-docgen-typescript-loader/dist/index.js","mtime":1537490019000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { faker } from '../livegen/code-generators';\nimport { argumentTypes, Macros, nodeTypes, SubTypes } from '../nodeTypes';\nexport var noPort = [];\nexport var singlePortOutput = [{\n  name: '',\n  output: true\n}];\nexport var accepted = [{\n  node: {\n    subType: SubTypes.field\n  }\n}, {\n  node: {\n    subType: SubTypes.faker\n  }\n}, {\n  node: {\n    type: nodeTypes.Query\n  }\n}, {\n  node: {\n    type: nodeTypes.Mutation\n  }\n}, {\n  node: {\n    type: nodeTypes.Subscription\n  }\n}, {\n  node: {\n    subType: SubTypes.clone\n  }\n}]; //Accepted inputs\n\nexport var inputs = [{\n  name: '',\n  accepted: accepted\n}];\nexport var outputs = [{\n  name: ''\n}];\n\nvar baseNode = function baseNode(subType, type) {\n  return {\n    type: type,\n    name: type,\n    subType: subType,\n    editable: true,\n    outputs: noPort,\n    inputs: noPort\n  };\n};\n\nvar baseDefinitionNode = function baseDefinitionNode(type) {\n  return _objectSpread({}, baseNode('definition', type), {\n    editable: true,\n    outputs: noPort,\n    inputs: noPort\n  });\n};\n\nvar baseFieldNode = function baseFieldNode(type) {\n  return _objectSpread({}, baseNode('field', type), {\n    editable: true,\n    inputs: inputs,\n    outputs: [{\n      name: ''\n    }]\n  });\n};\n\nvar getFakerNodes = function getFakerNodes() {\n  var fkNodes = faker.getFakerMethods();\n  return {\n    name: 'faker',\n    items: Object.keys(fkNodes).map(function (k) {\n      return {\n        name: k,\n        items: fkNodes[k].items.map(function (i) {\n          return {\n            name: i.name,\n            node: _objectSpread({}, baseNode('faker', argumentTypes.String), {\n              name: i.name,\n              editable: true,\n              kind: \"\".concat(k, \".\").concat(i.name),\n              inputs: inputs,\n              outputs: [{\n                name: ''\n              }]\n            })\n          };\n        })\n      };\n    })\n  };\n};\n\nexport var categories = [{\n  name: 'scalars',\n  items: Object.keys(argumentTypes).map(function (name) {\n    return {\n      name: name,\n      node: baseFieldNode(name)\n    };\n  })\n}, {\n  name: 'graph',\n  items: [{\n    name: nodeTypes.type,\n    node: _objectSpread({}, baseDefinitionNode(nodeTypes.type), {\n      inputs: inputs\n    })\n  }, {\n    name: nodeTypes.input,\n    node: _objectSpread({}, baseDefinitionNode(nodeTypes.input), {\n      inputs: inputs\n    })\n  }, {\n    name: nodeTypes.interface,\n    node: _objectSpread({}, baseDefinitionNode(nodeTypes.interface), {\n      inputs: inputs\n    })\n  }, {\n    name: nodeTypes.enum,\n    node: _objectSpread({}, baseDefinitionNode(nodeTypes.enum), {\n      inputs: [{\n        name: '',\n        accepted: [{\n          node: {\n            subType: SubTypes.field,\n            type: argumentTypes.String\n          }\n        }]\n      }]\n    })\n  }, {\n    name: nodeTypes.scalar,\n    node: _objectSpread({}, baseDefinitionNode(nodeTypes.scalar), {\n      inputs: noPort\n    })\n  }, {\n    name: nodeTypes.union,\n    node: _objectSpread({}, baseDefinitionNode(nodeTypes.union), {\n      inputs: [{\n        name: '',\n        accepted: [{\n          node: {\n            type: nodeTypes.type,\n            subType: SubTypes.clone\n          }\n        }]\n      }]\n    })\n  }, {\n    name: nodeTypes.array,\n    node: baseFieldNode(nodeTypes.array)\n  }, {\n    name: nodeTypes.Query,\n    node: _objectSpread({}, baseDefinitionNode(nodeTypes.Query), {\n      inputs: inputs,\n      outputs: outputs\n    })\n  }, {\n    name: nodeTypes.Mutation,\n    node: _objectSpread({}, baseDefinitionNode(nodeTypes.Mutation), {\n      inputs: inputs,\n      outputs: outputs\n    })\n  }, {\n    name: nodeTypes.Subscription,\n    node: _objectSpread({}, baseDefinitionNode(nodeTypes.Subscription), {\n      inputs: inputs,\n      outputs: outputs\n    })\n  }]\n}, {\n  name: 'cloud',\n  items: [{\n    name: Macros.crud,\n    node: _objectSpread({}, baseDefinitionNode(Macros.crud), {\n      inputs: [{\n        name: '',\n        accepted: [{\n          node: {\n            type: nodeTypes.type\n          }\n        }]\n      }],\n      outputs: noPort\n    })\n  }]\n}, getFakerNodes()];\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(noPort, \"noPort\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/categories/index.ts\");\n  reactHotLoader.register(singlePortOutput, \"singlePortOutput\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/categories/index.ts\");\n  reactHotLoader.register(accepted, \"accepted\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/categories/index.ts\");\n  reactHotLoader.register(inputs, \"inputs\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/categories/index.ts\");\n  reactHotLoader.register(outputs, \"outputs\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/categories/index.ts\");\n  reactHotLoader.register(baseNode, \"baseNode\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/categories/index.ts\");\n  reactHotLoader.register(baseDefinitionNode, \"baseDefinitionNode\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/categories/index.ts\");\n  reactHotLoader.register(baseFieldNode, \"baseFieldNode\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/categories/index.ts\");\n  reactHotLoader.register(getFakerNodes, \"getFakerNodes\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/categories/index.ts\");\n  reactHotLoader.register(categories, \"categories\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/categories/index.ts\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/categories/index.ts"],"names":["faker","argumentTypes","Macros","nodeTypes","SubTypes","noPort","singlePortOutput","name","output","accepted","node","subType","field","type","Query","Mutation","Subscription","clone","inputs","outputs","baseNode","editable","baseDefinitionNode","baseFieldNode","getFakerNodes","fkNodes","getFakerMethods","items","Object","keys","map","k","i","String","kind","categories","input","interface","enum","scalar","union","array","crud"],"mappings":"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","sourcesContent":["import { AcceptedConnection, ActionCategory, Item, PortType } from '@slothking-online/diagram';\nimport { GraphQLNodeType,faker } from '../livegen/code-generators';\nimport { argumentTypes, Macros, nodeTypes, SubTypes } from '../nodeTypes';\nexport const noPort = [];\nexport const singlePortOutput: PortType[] = [\n  {\n    name: '',\n    output: true\n  }\n];\nexport const accepted: AcceptedConnection[] = [\n  {\n    node: {\n      subType: SubTypes.field\n    }\n  },\n  {\n    node: {\n      subType: SubTypes.faker\n    }\n  },\n  {\n    node: {\n      type: nodeTypes.Query\n    }\n  },\n  {\n    node: {\n      type: nodeTypes.Mutation\n    }\n  },\n  {\n    node: {\n      type: nodeTypes.Subscription\n    }\n  },\n  {\n    node: {\n      subType: SubTypes.clone\n    }\n  }\n];\n//Accepted inputs\nexport const inputs: PortType[] = [\n  {\n    name: '',\n    accepted\n  }\n];\nexport const outputs: PortType[] = [\n  {\n    name: ''\n  }\n];\nconst baseNode = (\n  subType: GraphQLNodeType['subType'],\n  type: GraphQLNodeType['type']\n): GraphQLNodeType => ({\n  type,\n  name: type,\n  subType,\n  editable: true,\n  outputs: noPort,\n  inputs: noPort\n});\nconst baseDefinitionNode = (type: GraphQLNodeType['type']): GraphQLNodeType => ({\n  ...baseNode('definition', type),\n  editable: true,\n  outputs: noPort,\n  inputs: noPort\n});\nconst baseFieldNode = (type: GraphQLNodeType['type']): GraphQLNodeType => ({\n  ...baseNode('field', type),\n  editable: true,\n  inputs,\n  outputs: [\n    {\n      name: ''\n    }\n  ]\n});\n\nconst getFakerNodes = (): ActionCategory => {\n  const fkNodes = faker.getFakerMethods();\n  return {\n    name: 'faker',\n    items: Object.keys(fkNodes).map(\n      (k: keyof typeof fkNodes) =>\n        ({\n          name: k,\n          items: fkNodes[k].items.map(\n            (i) =>\n              ({\n                name: i.name,\n                node: {\n                  ...baseNode('faker', argumentTypes.String),\n                  name: i.name,\n                  editable: true,\n                  kind: `${k}.${i.name}`,\n                  inputs,\n                  outputs: [\n                    {\n                      name: ''\n                    }\n                  ]\n                }\n              } as Item)\n          )\n        } as Item)\n    )\n  };\n};\n\nexport const categories: ActionCategory[] = [\n  {\n    name: 'scalars',\n    items: Object.keys(argumentTypes).map(\n      (name) =>\n        ({\n          name,\n          node: baseFieldNode(name as GraphQLNodeType['type'])\n        } as Item)\n    )\n  },\n  {\n    name: 'graph',\n    items: [\n      {\n        name: nodeTypes.type,\n        node: {\n          ...baseDefinitionNode(nodeTypes.type),\n          inputs\n        }\n      },\n      {\n        name: nodeTypes.input,\n        node: {\n          ...baseDefinitionNode(nodeTypes.input),\n          inputs\n        }\n      },\n      {\n        name: nodeTypes.interface,\n        node: {\n          ...baseDefinitionNode(nodeTypes.interface),\n          inputs\n        }\n      },\n      {\n        name: nodeTypes.enum,\n        node: {\n          ...baseDefinitionNode(nodeTypes.enum),\n          inputs: [\n            {\n              name: '',\n              accepted: [\n                {\n                  node: {\n                    subType: SubTypes.field,\n                    type: argumentTypes.String\n                  }\n                }\n              ]\n            }\n          ]\n        }\n      },\n      {\n        name: nodeTypes.scalar,\n        node: {\n          ...baseDefinitionNode(nodeTypes.scalar),\n          inputs: noPort\n        }\n      },\n      {\n        name: nodeTypes.union,\n        node: {\n          ...baseDefinitionNode(nodeTypes.union),\n          inputs: [\n            {\n              name: '',\n              accepted: [\n                {\n                  node: {\n                    type: nodeTypes.type,\n                    subType: SubTypes.clone\n                  }\n                }\n              ]\n            }\n          ]\n        }\n      },\n      {\n        name: nodeTypes.array,\n        node: baseFieldNode(nodeTypes.array)\n      },\n      {\n        name: nodeTypes.Query,\n        node: {\n          ...baseDefinitionNode(nodeTypes.Query),\n          inputs,\n          outputs\n        }\n      },\n      {\n        name: nodeTypes.Mutation,\n        node: {\n          ...baseDefinitionNode(nodeTypes.Mutation),\n          inputs,\n          outputs\n        }\n      },\n      {\n        name: nodeTypes.Subscription,\n        node: {\n          ...baseDefinitionNode(nodeTypes.Subscription),\n          inputs,\n          outputs\n        }\n      }\n    ]\n  },\n  {\n    name: 'cloud',\n    items: [\n      {\n        name: Macros.crud,\n        node: {\n          ...baseDefinitionNode(Macros.crud),\n          inputs: [\n            {\n              name: '',\n              accepted: [\n                {\n                  node: {\n                    type: nodeTypes.type\n                  }\n                }\n              ]\n            }\n          ],\n          outputs: noPort\n        }\n      }\n    ]\n  },\n  getFakerNodes()\n];\n"]}]}