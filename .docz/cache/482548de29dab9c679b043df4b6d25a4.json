{"remainingRequest":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":false,\"typescript\":true,\"parseProps\":false}]],\"plugins\":[[\"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/docz-core/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/react-docgen-typescript-loader/dist/index.js?{}!/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/serialize.ts","dependencies":[{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/serialize.ts","mtime":1545855351000},{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/react-docgen-typescript-loader/dist/index.js","mtime":1537490019000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { nodeTypes, SubTypes } from '../nodeTypes';\nimport { utils } from './code-generators';\nimport { crudMacroTemplate } from './code-generators/graphql/macros';\nexport var regenerateNodes = function regenerateNodes(nodes, links) {\n  var nodeInputs = nodes.filter(function (n) {\n    return n.subType === SubTypes.definition;\n  }).map(function (n) {\n    return {\n      node: n,\n      inputs: utils.getDefinitionInputs(links, nodes, n),\n      outputs: utils.getDefinitionOutputs(links, nodes, n)\n    };\n  });\n  nodeInputs = nodeInputs.map(function (n) {\n    return n.node.type === nodeTypes.type ? _objectSpread({}, n, {\n      inputs: [].concat(_toConsumableArray(n.inputs), _toConsumableArray(n.inputs.filter(function (ni) {\n        return ni.type === nodeTypes.implements;\n      }).map(function (interfaceTypeInput) {\n        return nodeInputs.find(function (ni) {\n          return ni.node.id === interfaceTypeInput.clone;\n        }).inputs;\n      }).reduce(function (a, b) {\n        return [].concat(_toConsumableArray(a), _toConsumableArray(b));\n      }, [])))\n    }) : n;\n  });\n  return crudMacroTemplate(nodes, links, nodeInputs);\n};\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(regenerateNodes, \"regenerateNodes\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/serialize.ts\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/serialize.ts"],"names":["nodeTypes","SubTypes","utils","crudMacroTemplate","regenerateNodes","nodes","links","nodeInputs","filter","n","subType","definition","map","node","inputs","getDefinitionInputs","outputs","getDefinitionOutputs","type","ni","implements","interfaceTypeInput","find","id","clone","reduce","a","b"],"mappings":";;;;;;;;;;;;;;;;;;AACA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,cAApC;AACA,SAA0BC,KAA1B,QAAuC,mBAAvC;AAEA,SAASC,iBAAT,QAAkC,kCAAlC;AACA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD,EAA2BC,KAA3B,EAAiD;AAC9E,MAAIC,UAA2B,GAAGF,KAAK,CACpCG,MAD+B,CACxB,UAACC,CAAD;AAAA,WAAOA,CAAC,CAACC,OAAF,KAAcT,QAAQ,CAACU,UAA9B;AAAA,GADwB,EAE/BC,GAF+B,CAE3B,UAACH,CAAD;AAAA,WAAQ;AACXI,MAAAA,IAAI,EAAEJ,CADK;AAEXK,MAAAA,MAAM,EAAEZ,KAAK,CAACa,mBAAN,CAA0BT,KAA1B,EAAiCD,KAAjC,EAAwCI,CAAxC,CAFG;AAGXO,MAAAA,OAAO,EAAEd,KAAK,CAACe,oBAAN,CAA2BX,KAA3B,EAAkCD,KAAlC,EAAyCI,CAAzC;AAHE,KAAR;AAAA,GAF2B,CAAlC;AAOAF,EAAAA,UAAU,GAAGA,UAAU,CAACK,GAAX,CACX,UAACH,CAAD;AAAA,WACEA,CAAC,CAACI,IAAF,CAAOK,IAAP,KAAgBlB,SAAS,CAACkB,IAA1B,qBAEST,CAFT;AAGMK,MAAAA,MAAM,+BACDL,CAAC,CAACK,MADD,sBAEDL,CAAC,CAACK,MAAF,CACAN,MADA,CACO,UAACW,EAAD;AAAA,eAAQA,EAAE,CAACD,IAAH,KAAYlB,SAAS,CAACoB,UAA9B;AAAA,OADP,EAEAR,GAFA,CAGC,UAACS,kBAAD;AAAA,eACEd,UAAU,CAACe,IAAX,CAAgB,UAACH,EAAD;AAAA,iBAAQA,EAAE,CAACN,IAAH,CAAQU,EAAR,KAAeF,kBAAkB,CAACG,KAA1C;AAAA,SAAhB,EAAiEV,MADnE;AAAA,OAHD,EAMAW,MANA,CAMO,UAACC,CAAD,EAAIC,CAAJ;AAAA,4CAAcD,CAAd,sBAAoBC,CAApB;AAAA,OANP,EAM+B,EAN/B,CAFC;AAHZ,SAcIlB,CAfN;AAAA,GADW,CAAb;AAkBA,SAAON,iBAAiB,CAACE,KAAD,EAAQC,KAAR,EAAeC,UAAf,CAAxB;AACD,CA3BM;;;;;;;;;;;;0BAAMH,e","sourcesContent":["import { LinkType } from '@slothking-online/diagram';\nimport { nodeTypes, SubTypes } from '../nodeTypes';\nimport { GraphQLNodeType, utils } from './code-generators';\nimport { TemplateProps } from './code-generators/graphql/template';\nimport { crudMacroTemplate } from './code-generators/graphql/macros';\nexport const regenerateNodes = (nodes: GraphQLNodeType[], links: LinkType[]) => {\n  let nodeInputs: TemplateProps[] = nodes\n    .filter((n) => n.subType === SubTypes.definition)\n    .map((n) => ({\n      node: n,\n      inputs: utils.getDefinitionInputs(links, nodes, n),\n      outputs: utils.getDefinitionOutputs(links, nodes, n)\n    }));\n  nodeInputs = nodeInputs.map(\n    (n) =>\n      n.node.type === nodeTypes.type\n        ? {\n            ...n,\n            inputs: [\n              ...n.inputs,\n              ...n.inputs\n                .filter((ni) => ni.type === nodeTypes.implements)\n                .map(\n                  (interfaceTypeInput) =>\n                    nodeInputs.find((ni) => ni.node.id === interfaceTypeInput.clone).inputs\n                )\n                .reduce((a, b) => [...a, ...b], [])\n            ]\n          }\n        : n\n  );\n  return crudMacroTemplate(nodes, links, nodeInputs);\n};\n"]}]}