{"remainingRequest":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":false,\"typescript\":true,\"parseProps\":false}]],\"plugins\":[[\"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/docz-core/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/react-docgen-typescript-loader/dist/index.js?{}!/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/code-generators/faker/serialize.ts","dependencies":[{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/code-generators/faker/serialize.ts","mtime":1545858107000},{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/react-docgen-typescript-loader/dist/index.js","mtime":1537490019000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nimport { nodeTypes } from '../../../nodeTypes';\nimport { arrayToDict, generateFakerResolverOperation, generateFakerResolverType, generateFakerResolverEnum, generateFakerResolverScalar, generateFakerResolverUnion } from '../faker';\nimport { regenerateNodes } from '../../serialize';\nexport var serializeFaker = function serializeFaker(node, links, tabs) {\n  var nodes = _toConsumableArray(node);\n\n  var nodeInputs = regenerateNodes(nodes, links);\n  var fakeResolvers = [nodeTypes.type, nodeTypes.interface, nodeTypes.input].reduce(function (a, b) {\n    a = _objectSpread({}, a, arrayToDict(nodeInputs.filter(function (n) {\n      return n.node.type === b;\n    }).map(generateFakerResolverType)));\n    return a;\n  }, {});\n  var fakeEnumResolvers = [nodeTypes.enum].reduce(function (a, b) {\n    a = _objectSpread({}, a, arrayToDict(nodeInputs.filter(function (n) {\n      return n.node.type === b;\n    }).map(generateFakerResolverEnum)));\n    return a;\n  }, {});\n  var fakeScalarResolvers = [nodeTypes.scalar].reduce(function (a, b) {\n    a = _objectSpread({}, a, arrayToDict(nodeInputs.filter(function (n) {\n      return n.node.type === b;\n    }).map(generateFakerResolverScalar)));\n    return a;\n  }, {});\n  var fakeUnionResolvers = [nodeTypes.union].reduce(function (a, b) {\n    a = _objectSpread({}, a, arrayToDict(nodeInputs.filter(function (n) {\n      return n.node.type === b;\n    }).map(generateFakerResolverUnion)));\n    return a;\n  }, {});\n  var fakeOperationResolvers = [nodeTypes.Query, nodeTypes.Mutation, nodeTypes.Subscription].reduce(function (a, b) {\n    a[b] = arrayToDict(nodeInputs.filter(function (n) {\n      return n.node.type === b;\n    }).map(generateFakerResolverOperation));\n    return a;\n  }, {});\n\n  var fakeSchema = _objectSpread({}, fakeOperationResolvers, fakeResolvers, fakeEnumResolvers, fakeScalarResolvers, fakeUnionResolvers);\n\n  return {\n    code: JSON.stringify(fakeSchema, null, 4),\n    nodes: nodes,\n    links: links\n  };\n};\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(serializeFaker, \"serializeFaker\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/code-generators/faker/serialize.ts\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/code-generators/faker/serialize.ts"],"names":["nodeTypes","arrayToDict","generateFakerResolverOperation","generateFakerResolverType","generateFakerResolverEnum","generateFakerResolverScalar","generateFakerResolverUnion","regenerateNodes","serializeFaker","node","links","tabs","nodes","nodeInputs","fakeResolvers","type","interface","input","reduce","a","b","filter","n","map","fakeEnumResolvers","enum","fakeScalarResolvers","scalar","fakeUnionResolvers","union","fakeOperationResolvers","Query","Mutation","Subscription","fakeSchema","code","JSON","stringify"],"mappings":"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","sourcesContent":["import { GraphQLNodeType } from '../';\nimport { TemplateProps } from '../graphql/template';\nimport { nodeTypes } from '../../../nodeTypes';\nimport { arrayToDict, generateFakerResolverOperation, generateFakerResolverType, generateFakerResolverEnum, generateFakerResolverScalar, generateFakerResolverUnion } from '../faker';\nimport { NodeType, LinkType } from '@slothking-online/diagram';\nimport { regenerateNodes } from '../../serialize';\nexport const serializeFaker = (\n  node: NodeType[],\n  links: LinkType[],\n  tabs: string[]\n): {\n  code: string;\n  nodes: GraphQLNodeType[];\n  links: LinkType[];\n} => {\n  const nodes = [...node] as GraphQLNodeType[];\n  const nodeInputs: TemplateProps[] = regenerateNodes(nodes, links);\n  const fakeResolvers = [nodeTypes.type, nodeTypes.interface, nodeTypes.input].reduce((a, b) => {\n    a = {\n      ...a,\n      ...arrayToDict(nodeInputs.filter((n) => n.node.type === b).map(generateFakerResolverType))\n    };\n    return a;\n  }, {});\n\n  const fakeEnumResolvers = [nodeTypes.enum].reduce((a, b) => {\n    a = {\n      ...a,\n      ...arrayToDict(nodeInputs.filter((n) => n.node.type === b).map(generateFakerResolverEnum))\n    };\n    return a;\n  }, {});\n\n\n  const fakeScalarResolvers = [nodeTypes.scalar].reduce((a, b) => {\n    a = {\n      ...a,\n      ...arrayToDict(nodeInputs.filter((n) => n.node.type === b).map(generateFakerResolverScalar))\n    };\n    return a;\n  }, {});\n\n  const fakeUnionResolvers = [nodeTypes.union].reduce((a, b) => {\n    a = {\n      ...a,\n      ...arrayToDict(nodeInputs.filter((n) => n.node.type === b).map(generateFakerResolverUnion))\n    };\n    return a;\n  }, {});\n  const fakeOperationResolvers = [\n    nodeTypes.Query,\n    nodeTypes.Mutation,\n    nodeTypes.Subscription\n  ].reduce((a, b) => {\n    a[b] = arrayToDict(\n      nodeInputs.filter((n) => n.node.type === b).map(generateFakerResolverOperation)\n    );\n    return a;\n  }, {});\n  const fakeSchema = {\n    ...fakeOperationResolvers,\n    ...fakeResolvers,\n    ...fakeEnumResolvers,\n    ...fakeScalarResolvers,\n    ...fakeUnionResolvers\n  };\n  return {\n    code: JSON.stringify(fakeSchema, null, 4),\n    nodes,\n    links\n  };\n};\n"]}]}