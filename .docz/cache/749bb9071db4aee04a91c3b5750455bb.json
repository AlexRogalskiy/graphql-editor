{"remainingRequest":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":false,\"typescript\":true,\"parseProps\":false}]],\"plugins\":[[\"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/docz-core/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/react-docgen-typescript-loader/dist/index.js?{}!/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/code-generators/graphql/macros/crud.ts","dependencies":[{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/code-generators/graphql/macros/crud.ts","mtime":1539343956000},{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/react-docgen-typescript-loader/dist/index.js","mtime":1537490019000}],"contextDependencies":[],"result":["(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { generateId } from '@slothking-online/diagram';\nimport { argumentTypes, SubTypes, Macros, nodeTypes } from '../../../../nodeTypes';\nimport { getDefinitionInputs, find } from '../../utils';\nvar IDInputGenerate = {\n  name: 'id',\n  type: argumentTypes.ID,\n  inputs: [],\n  outputs: [],\n  subType: SubTypes.field\n};\nexport var crudMacroTemplate = function crudMacroTemplate(nodes, links, nodeInputs) {\n  return find(nodes, Macros.crud).map(function (n) {\n    var newNodes = [];\n\n    var createBaseInputNode = function createBaseInputNode(node, name, inputs, outputs) {\n      return {\n        node: _objectSpread({}, node, {\n          id: generateId(),\n          type: nodeTypes.input,\n          name: \"\".concat(node.name).concat(name)\n        }),\n        inputs: inputs,\n        outputs: []\n      };\n    };\n\n    var createBaseQueryNode = function createBaseQueryNode(name, _ref) {\n      var inputs = _ref.inputs,\n          outputs = _ref.outputs;\n      return {\n        node: {\n          id: generateId(),\n          type: nodeTypes.Query,\n          subType: SubTypes.definition,\n          name: \"\".concat(name),\n          inputs: [],\n          outputs: []\n        },\n        inputs: inputs,\n        outputs: outputs\n      };\n    };\n\n    var createBaseMutationNode = function createBaseMutationNode(name, _ref2) {\n      var inputs = _ref2.inputs,\n          outputs = _ref2.outputs;\n      return {\n        node: {\n          id: generateId(),\n          type: nodeTypes.Mutation,\n          subType: SubTypes.definition,\n          name: \"\".concat(name),\n          inputs: [],\n          outputs: []\n        },\n        inputs: inputs,\n        outputs: outputs\n      };\n    };\n\n    var macroTypeInputs = getDefinitionInputs(links, nodes, n);\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      var _loop = function _loop() {\n        typeInput = _step.value;\n\n        var _nodeInputs$find = nodeInputs.find(function (n) {\n          return n.node.id === typeInput.clone;\n        }),\n            node = _nodeInputs$find.node,\n            inputs = _nodeInputs$find.inputs;\n\n        var hasId = inputs.find(function (i) {\n          return i.type === argumentTypes.ID && i.name === 'id';\n        });\n        var InputIDNode = hasId || IDInputGenerate;\n\n        if (!!hasId) {\n          inputs = inputs.filter(function (i) {\n            return i.id !== hasId.id;\n          });\n        } else {\n          nodeInputs = nodeInputs.map(function (i) {\n            return i.node.id === node.id ? _objectSpread({}, i, {\n              inputs: [].concat(_toConsumableArray(i.inputs), [InputIDNode])\n            }) : i;\n          });\n        }\n\n        var _ref3 = [createBaseInputNode(typeInput, 'CreateInput', inputs), createBaseInputNode(typeInput, 'UpdateInput', inputs.concat([InputIDNode])), createBaseInputNode(typeInput, 'ReadInput', [InputIDNode]), createBaseInputNode(typeInput, 'DeleteInput', [InputIDNode])],\n            createInput = _ref3[0],\n            updateInput = _ref3[1],\n            readInput = _ref3[2],\n            deleteInput = _ref3[3];\n        newNodes.push(createInput);\n        newNodes.push(updateInput);\n        newNodes.push(readInput);\n        newNodes.push(deleteInput);\n\n        var clonedTypeNode = function clonedTypeNode(n) {\n          return _objectSpread({}, n, {\n            id: generateId(),\n            clone: n.id,\n            subType: SubTypes.clone,\n            kind: n.name\n          });\n        };\n\n        newNodes.push(createBaseQueryNode(\"list\".concat(node.name), {\n          inputs: [],\n          outputs: [_objectSpread({\n            array: true\n          }, clonedTypeNode(node))]\n        }));\n        newNodes.push(createBaseQueryNode(\"read\".concat(node.name), {\n          inputs: [_objectSpread({}, clonedTypeNode(readInput.node), {\n            name: node.name\n          })],\n          outputs: [_objectSpread({}, clonedTypeNode(node))]\n        }));\n        newNodes.push(createBaseMutationNode(\"create\".concat(node.name), {\n          inputs: [_objectSpread({}, clonedTypeNode(createInput.node), {\n            name: node.name\n          })],\n          outputs: [_objectSpread({}, clonedTypeNode(node))]\n        }));\n        newNodes.push(createBaseMutationNode(\"update\".concat(node.name), {\n          inputs: [_objectSpread({}, clonedTypeNode(updateInput.node), {\n            name: node.name\n          })],\n          outputs: [_objectSpread({}, clonedTypeNode(node))]\n        }));\n        newNodes.push(createBaseMutationNode(\"delete\".concat(node.name), {\n          inputs: [_objectSpread({}, clonedTypeNode(deleteInput.node), {\n            name: node.name\n          })],\n          outputs: [_objectSpread({}, clonedTypeNode(node))]\n        }));\n      };\n\n      for (var _iterator = macroTypeInputs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var typeInput;\n\n        _loop();\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return newNodes;\n  }).reduce(function (a, b) {\n    return [].concat(_toConsumableArray(a), _toConsumableArray(b));\n  }, []).concat(nodeInputs);\n};\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(IDInputGenerate, \"IDInputGenerate\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/code-generators/graphql/macros/crud.ts\");\n  reactHotLoader.register(crudMacroTemplate, \"crudMacroTemplate\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/code-generators/graphql/macros/crud.ts\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/livegen/code-generators/graphql/macros/crud.ts"],"names":["generateId","argumentTypes","SubTypes","Macros","nodeTypes","getDefinitionInputs","find","IDInputGenerate","name","type","ID","inputs","outputs","subType","field","crudMacroTemplate","nodes","links","nodeInputs","crud","map","n","newNodes","createBaseInputNode","node","id","input","createBaseQueryNode","Query","definition","createBaseMutationNode","Mutation","macroTypeInputs","typeInput","clone","hasId","i","InputIDNode","filter","concat","createInput","updateInput","readInput","deleteInput","push","clonedTypeNode","kind","array","reduce","a","b"],"mappings":"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","sourcesContent":["import { TransformedInput, GraphQLNodeType } from '../..';\nimport { LinkType, generateId } from '@slothking-online/diagram';\nimport { argumentTypes, SubTypes, Macros, nodeTypes } from '../../../../nodeTypes';\nimport { getDefinitionInputs, find } from '../../utils';\nimport { TemplateProps } from '../template';\n\nconst IDInputGenerate: TransformedInput = {\n  name: 'id',\n  type: argumentTypes.ID,\n  inputs: [],\n  outputs: [],\n  subType: SubTypes.field\n};\n\nexport const crudMacroTemplate = (\n  nodes: GraphQLNodeType[],\n  links: LinkType[],\n  nodeInputs: TemplateProps[]\n): TemplateProps[] =>\n  find(nodes, Macros.crud)\n    .map((n) => {\n      const newNodes: {\n        node: GraphQLNodeType;\n        inputs: TransformedInput[];\n      }[] = [];\n      const createBaseInputNode = (\n        node: GraphQLNodeType,\n        name: string,\n        inputs: TransformedInput[],\n        outputs?: TransformedInput[]\n      ): TemplateProps => ({\n        node: {\n          ...node,\n          id: generateId(),\n          type: nodeTypes.input,\n          name: `${node.name}${name}`\n        },\n        inputs,\n        outputs: []\n      });\n      const createBaseQueryNode = (\n        name: string,\n        { inputs, outputs }: Partial<TemplateProps>\n      ): TemplateProps => ({\n        node: {\n          id: generateId(),\n          type: nodeTypes.Query,\n          subType: SubTypes.definition,\n          name: `${name}`,\n          inputs: [],\n          outputs: []\n        },\n        inputs,\n        outputs\n      });\n      const createBaseMutationNode = (\n        name: string,\n        { inputs, outputs }: Partial<TemplateProps>\n      ): TemplateProps => ({\n        node: {\n          id: generateId(),\n          type: nodeTypes.Mutation,\n          subType: SubTypes.definition,\n          name: `${name}`,\n          inputs: [],\n          outputs: []\n        },\n        inputs,\n        outputs\n      });\n      const macroTypeInputs = getDefinitionInputs(links, nodes, n);\n      for (var typeInput of macroTypeInputs) {\n        let { node, inputs } = nodeInputs.find((n) => n.node.id === typeInput.clone);\n        const hasId = inputs.find((i) => i.type === argumentTypes.ID && i.name === 'id');\n        const InputIDNode: TransformedInput = hasId || IDInputGenerate;\n        if (!!hasId) {\n          inputs = inputs.filter((i) => i.id !== hasId.id);\n        } else {\n          nodeInputs = nodeInputs.map(\n            (i) => (i.node.id === node.id ? { ...i, inputs: [...i.inputs, InputIDNode] } : i)\n          );\n        }\n        const [createInput, updateInput, readInput, deleteInput] = [\n          createBaseInputNode(typeInput, 'CreateInput', inputs),\n          createBaseInputNode(typeInput, 'UpdateInput', inputs.concat([InputIDNode])),\n          createBaseInputNode(typeInput, 'ReadInput', [InputIDNode]),\n          createBaseInputNode(typeInput, 'DeleteInput', [InputIDNode])\n        ];\n        newNodes.push(createInput);\n        newNodes.push(updateInput);\n        newNodes.push(readInput);\n        newNodes.push(deleteInput);\n        const clonedTypeNode = (n: GraphQLNodeType): GraphQLNodeType => ({\n          ...n,\n          id: generateId(),\n          clone: n.id,\n          subType: SubTypes.clone,\n          kind: n.name\n        });\n        newNodes.push(\n          createBaseQueryNode(`list${node.name}`, {\n            inputs: [],\n            outputs: [\n              {\n                array: true,\n                ...clonedTypeNode(node)\n              }\n            ]\n          })\n        );\n        newNodes.push(\n          createBaseQueryNode(`read${node.name}`, {\n            inputs: [{ ...clonedTypeNode(readInput.node), name: node.name }],\n            outputs: [\n              {\n                ...clonedTypeNode(node)\n              }\n            ]\n          })\n        );\n        newNodes.push(\n          createBaseMutationNode(`create${node.name}`, {\n            inputs: [{ ...clonedTypeNode(createInput.node), name: node.name }],\n            outputs: [\n              {\n                ...clonedTypeNode(node)\n              }\n            ]\n          })\n        );\n        newNodes.push(\n          createBaseMutationNode(`update${node.name}`, {\n            inputs: [{ ...clonedTypeNode(updateInput.node), name: node.name }],\n            outputs: [\n              {\n                ...clonedTypeNode(node)\n              }\n            ]\n          })\n        );\n        newNodes.push(\n          createBaseMutationNode(`delete${node.name}`, {\n            inputs: [{ ...clonedTypeNode(deleteInput.node), name: node.name }],\n            outputs: [\n              {\n                ...clonedTypeNode(node)\n              }\n            ]\n          })\n        );\n      }\n      return newNodes;\n    })\n    .reduce((a, b) => [...a, ...b], [])\n    .concat(nodeInputs);\n"]}]}