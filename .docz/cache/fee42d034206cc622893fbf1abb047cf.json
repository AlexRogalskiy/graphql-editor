{"remainingRequest":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":false,\"typescript\":true,\"parseProps\":false}]],\"plugins\":[[\"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/docz-core/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheCompression\":false,\"compact\":false}!/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/react-docgen-typescript-loader/dist/index.js?{}!/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/Code.tsx","dependencies":[{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/Code.tsx","mtime":1545911648000},{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/node_modules/react-docgen-typescript-loader/dist/index.js","mtime":1537490019000}],"contextDependencies":[],"result":["var _jsxFileName = \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/Code.tsx\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport * as React from 'react';\nimport * as styles from './style/Code';\nimport cx from 'classnames';\nimport { importSchema, makeNodes } from './livegen/load';\nimport { SelectLanguage } from './SelectLanguage';\nimport AceEditor from 'react-ace';\n\nrequire(\"brace/theme/twilight\");\n\nrequire(\"brace/mode/typescript\");\n\nrequire(\"brace/mode/graphqlschema\");\n\nrequire(\"brace/mode/json\");\n\nrequire(\"brace/ext/searchbox\");\n\nexport var TABS = {\n  graphql: {},\n  typescript: {},\n  json: {}\n};\nexport var CodeEditor =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CodeEditor, _React$Component);\n\n  function CodeEditor() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, CodeEditor);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CodeEditor)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      loadingUrl: false,\n      canMountAce: false,\n      currentTab: 'graphql'\n    };\n    _this.taskRunner = void 0;\n    _this.lastSchema = void 0;\n    _this.lastEdit = 0;\n    _this.lastGeneration = 0;\n    _this.holder = void 0;\n    _this.editor = void 0;\n    return _this;\n  }\n\n  _createClass(CodeEditor, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.taskRunner = setInterval(function () {\n        if (_this2.lastSchema && _this2.lastEdit > _this2.lastGeneration) {\n          try {\n            var _makeNodes = makeNodes(importSchema(_this2.lastSchema)),\n                nodes = _makeNodes.nodes,\n                links = _makeNodes.links;\n\n            _this2.props.remakeNodes && _this2.props.remakeNodes(nodes, links, _this2.lastSchema);\n            _this2.lastGeneration = Date.now();\n          } catch (error) {\n            console.log(error);\n          }\n        }\n      }, 300);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      clearInterval(this.taskRunner);\n    } // loadFromFile = (e) => {\n    //   const file = e.target.files[0];\n    //   // if (file.type.match('application/json')) {\n    //   console.log(file.type);\n    //   const reader = new FileReader();\n    //   reader.onload = (f) => {\n    //     const result = makeNodes(importSchema((f.target as any).result));\n    //     this.props.loadNodes(result);\n    //   };\n    //   reader.readAsText(file);\n    //   // }\n    // };\n    // saveToFile = () => {\n    //   var file = new File([this.props.schema], `graphql-editor-schema.gql`, {\n    //     type: 'application/json'\n    //   });\n    //   FileSaver.saveAs(file, `graphql-editor-schema.gql`);\n    // };\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        className: cx(styles.Sidebar),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(SelectLanguage, {\n        tabs: Object.keys(TABS),\n        onSelect: function onSelect(currentTab) {\n          _this3.props.languageChanged && _this3.props.languageChanged(currentTab);\n\n          _this3.setState({\n            currentTab: currentTab\n          });\n\n          _this3.props.onTabChange(currentTab);\n        },\n        onCopy: function onCopy() {\n          var _ref = window.navigator,\n              clipboard = _ref.clipboard;\n          _this3.props.copiedToClipboard && _this3.props.copiedToClipboard();\n          clipboard.writeText(_this3.props.schema);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: cx(styles.CodeContainer),\n        ref: function ref(_ref2) {\n          if (_ref2 && !_this3.holder) {\n            _this3.holder = _ref2;\n            setTimeout(function () {\n              _this3.refs.editor.editor.resize();\n            }, 1);\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(AceEditor, {\n        ref: 'editor',\n        mode: {\n          graphql: 'graphqlschema',\n          typescript: 'typescript',\n          json: 'json'\n        }[this.props.language],\n        onBlur: function onBlur(e) {\n          _this3.lastEdit = Date.now();\n        },\n        onChange: function onChange(e, v) {\n          if (!_this3.lastSchema) {\n            _this3.props.schemaChanged && _this3.props.schemaChanged(e);\n          }\n\n          _this3.lastSchema = e;\n        },\n        style: {\n          flex: 1,\n          height: 'auto'\n        },\n        editorProps: {\n          $blockScrolling: Infinity\n        },\n        setOptions: {\n          readOnly: {\n            graphql: false,\n            typescript: true,\n            json: true\n          }[this.props.language],\n          showLineNumbers: true\n        },\n        theme: 'twilight',\n        value: this.props.schema,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      })));\n    }\n  }, {\n    key: \"__reactstandin__regenerateByEval\",\n    // @ts-ignore\n    value: function __reactstandin__regenerateByEval(key, code) {\n      // @ts-ignore\n      this[key] = eval(code);\n    }\n  }]);\n\n  return CodeEditor;\n}(React.Component);\n\ntry {\n  // @ts-ignore\n  CodeEditor.displayName = \"CodeEditor\"; // @ts-ignore\n\n  CodeEditor.__docgenInfo = {\n    \"description\": \"\",\n    \"displayName\": \"CodeEditor\",\n    \"props\": {\n      \"schema\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"schema\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"onTabChange\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"onTabChange\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"(name: \\\"graphql\\\" | \\\"typescript\\\" | \\\"json\\\") => void\"\n        }\n      },\n      \"language\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"language\",\n        \"required\": true,\n        \"type\": {\n          \"name\": \"string\"\n        }\n      },\n      \"languageChanged\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"languageChanged\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(language: string) => void\"\n        }\n      },\n      \"schemaChanged\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"schemaChanged\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(schema: string) => void\"\n        }\n      },\n      \"copiedToClipboard\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"copiedToClipboard\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"() => void\"\n        }\n      },\n      \"remakeNodes\": {\n        \"defaultValue\": null,\n        \"description\": \"\",\n        \"name\": \"remakeNodes\",\n        \"required\": false,\n        \"type\": {\n          \"name\": \"(nodes: GraphQLNodeType[], links: LinkType[], code: string) => void\"\n        }\n      }\n    }\n  }; // @ts-ignore\n\n  if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\") // @ts-ignore\n    STORYBOOK_REACT_CLASSES[\"src/editor/Code.tsx#CodeEditor\"] = {\n      docgenInfo: CodeEditor.__docgenInfo,\n      name: \"CodeEditor\",\n      path: \"src/editor/Code.tsx#CodeEditor\"\n    };\n} catch (__react_docgen_typescript_loader_error) {}\n\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(TABS, \"TABS\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/Code.tsx\");\n  reactHotLoader.register(CodeEditor, \"CodeEditor\", \"/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/Code.tsx\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/arturczemiel/.projects/graphqleditor.com/graphql-editor/src/editor/Code.tsx"],"names":["React","styles","cx","importSchema","makeNodes","SelectLanguage","AceEditor","require","TABS","graphql","typescript","json","CodeEditor","state","loadingUrl","canMountAce","currentTab","taskRunner","lastSchema","lastEdit","lastGeneration","holder","editor","setInterval","nodes","links","props","remakeNodes","Date","now","error","console","log","clearInterval","Sidebar","Object","keys","languageChanged","setState","onTabChange","window","navigator","clipboard","copiedToClipboard","writeText","schema","CodeContainer","ref","setTimeout","refs","resize","language","e","v","schemaChanged","flex","height","$blockScrolling","Infinity","readOnly","showLineNumbers","Component","displayName","__docgenInfo","STORYBOOK_REACT_CLASSES","docgenInfo","name","path","__react_docgen_typescript_loader_error"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as styles from './style/Code';\nimport cx from 'classnames';\n\nimport { importSchema, makeNodes } from './livegen/load';\nimport { SelectLanguage } from './SelectLanguage';\nimport AceEditor from 'react-ace';\nimport { GraphQLNodeType } from './livegen/code-generators';\nimport { LinkType } from '@slothking-online/diagram';\nrequire(`brace/theme/twilight`);\nrequire(`brace/mode/typescript`);\nrequire(`brace/mode/graphqlschema`);\nrequire(`brace/mode/json`);\nrequire(`brace/ext/searchbox`);\nexport const TABS = {\n  graphql: {},\n  typescript: {},\n  json: {}\n};\n\nexport type CodeEditorOuterProps = {\n  languageChanged?: (language: string) => void;\n  schemaChanged?: (schema: string) => void;\n  copiedToClipboard?: () => void;\n  remakeNodes?: (nodes: GraphQLNodeType[], links: LinkType[], code: string) => void;\n};\n\nexport type CodeEditorProps = {\n  schema: string;\n  onTabChange: (name: keyof typeof TABS) => void;\n  language: string;\n} & CodeEditorOuterProps;\nexport type CodeEditorState = {\n  loadingUrl: boolean;\n  currentTab: keyof typeof TABS;\n  canMountAce: boolean;\n};\n\nexport class CodeEditor extends React.Component<CodeEditorProps, CodeEditorState> {\n  state: CodeEditorState = {\n    loadingUrl: false,\n    canMountAce: false,\n    currentTab: 'graphql'\n  };\n  taskRunner: number;\n  lastSchema: string;\n  lastEdit = 0;\n  lastGeneration = 0;\n  holder: HTMLDivElement;\n  editor: AceEditor;\n  componentDidMount() {\n    this.taskRunner = setInterval(() => {\n      if (this.lastSchema && this.lastEdit > this.lastGeneration) {\n        try {\n          const { nodes, links } = makeNodes(importSchema(this.lastSchema));\n          this.props.remakeNodes && this.props.remakeNodes(nodes, links, this.lastSchema);\n          this.lastGeneration = Date.now();\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    }, 300) as any;\n  }\n  componentWillUnmount() {\n    clearInterval(this.taskRunner);\n  }\n  // loadFromFile = (e) => {\n  //   const file = e.target.files[0];\n  //   // if (file.type.match('application/json')) {\n  //   console.log(file.type);\n  //   const reader = new FileReader();\n  //   reader.onload = (f) => {\n  //     const result = makeNodes(importSchema((f.target as any).result));\n  //     this.props.loadNodes(result);\n  //   };\n  //   reader.readAsText(file);\n  //   // }\n  // };\n\n  // saveToFile = () => {\n  //   var file = new File([this.props.schema], `graphql-editor-schema.gql`, {\n  //     type: 'application/json'\n  //   });\n  //   FileSaver.saveAs(file, `graphql-editor-schema.gql`);\n  // };\n  render() {\n    return (\n      <div className={cx(styles.Sidebar)}>\n        <SelectLanguage\n          tabs={Object.keys(TABS)}\n          onSelect={(currentTab) => {\n            this.props.languageChanged && this.props.languageChanged(currentTab);\n            this.setState({ currentTab });\n            this.props.onTabChange(currentTab);\n          }}\n          onCopy={() => {\n            const { clipboard } = window.navigator as any;\n            this.props.copiedToClipboard && this.props.copiedToClipboard();\n            clipboard.writeText(this.props.schema);\n          }}\n        />\n        <div\n          className={cx(styles.CodeContainer)}\n          ref={(ref) => {\n            if (ref && !this.holder) {\n              this.holder = ref;\n              setTimeout(() => {\n                (this.refs.editor as any).editor.resize();\n              }, 1);\n            }\n          }}\n        >\n          <AceEditor\n            ref={'editor'}\n            mode={\n              {\n                graphql: 'graphqlschema',\n                typescript: 'typescript',\n                json: 'json'\n              }[this.props.language]\n            }\n            onBlur={(e) => {\n              this.lastEdit = Date.now();\n            }}\n            onChange={(\n              e,\n              v: {\n                action: 'insert' | 'remove';\n                lines: string[];\n                end: { row: number; column: number };\n                start: { row: number; column: number };\n              }\n            ) => {\n              if (!this.lastSchema) {\n                this.props.schemaChanged && this.props.schemaChanged(e);\n              }\n              this.lastSchema = e;\n            }}\n            style={{\n              flex: 1,\n              height: 'auto'\n            }}\n            editorProps={{\n              $blockScrolling: Infinity\n            }}\n            setOptions={{\n              readOnly: {\n                graphql: false,\n                typescript: true,\n                json: true\n              }[this.props.language],\n              showLineNumbers: true\n            }}\n            theme={'twilight'}\n            value={this.props.schema}\n          />\n        </div>\n      </div>\n    );\n  }\n}\ntry {\n    // @ts-ignore\n    CodeEditor.displayName = \"CodeEditor\";\n    // @ts-ignore\n    CodeEditor.__docgenInfo = { \"description\": \"\", \"displayName\": \"CodeEditor\", \"props\": { \"schema\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"schema\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"onTabChange\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"onTabChange\", \"required\": true, \"type\": { \"name\": \"(name: \\\"graphql\\\" | \\\"typescript\\\" | \\\"json\\\") => void\" } }, \"language\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"language\", \"required\": true, \"type\": { \"name\": \"string\" } }, \"languageChanged\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"languageChanged\", \"required\": false, \"type\": { \"name\": \"(language: string) => void\" } }, \"schemaChanged\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"schemaChanged\", \"required\": false, \"type\": { \"name\": \"(schema: string) => void\" } }, \"copiedToClipboard\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"copiedToClipboard\", \"required\": false, \"type\": { \"name\": \"() => void\" } }, \"remakeNodes\": { \"defaultValue\": null, \"description\": \"\", \"name\": \"remakeNodes\", \"required\": false, \"type\": { \"name\": \"(nodes: GraphQLNodeType[], links: LinkType[], code: string) => void\" } } } };\n    // @ts-ignore\n    if (typeof STORYBOOK_REACT_CLASSES !== \"undefined\")\n        // @ts-ignore\n        STORYBOOK_REACT_CLASSES[\"src/editor/Code.tsx#CodeEditor\"] = { docgenInfo: CodeEditor.__docgenInfo, name: \"CodeEditor\", path: \"src/editor/Code.tsx#CodeEditor\" };\n}\ncatch (__react_docgen_typescript_loader_error) { }"]}]}